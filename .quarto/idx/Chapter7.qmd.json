{"title":"Go Bigger","markdown":{"yaml":{"title":"Go Bigger","format":"pdf","editor":"visual","label":"sec-chap7"},"headingText":"Multiple Regression","containsRefs":false,"markdown":"\n\n\nMultiple linear regression is just like simple linear regression, but instead of using only one independent variable $(X)$ to predict the outcome $(Y)$, it uses two or more independent variables at the same time. Each independent variable gets its own coefficient ( $β_1, β_2, β_3...$ etc.), representing its unique effect on the dependent variable while keeping the others constant. This allows you to see how each factor influences the outcome, controlling for the others.\n\nSo for a model with $p$ independent predictor terms, the model now takes the form:\n\n$$y=β_0+β_1x_1+β_2x_2+β_3x_3+...+β_px_p+ε$$As you can see, it gets to be a bit much to write out this long-form notation, hence the beauty and value of the alternative matrix approach. Recall that in addition to describing a linear regression model with a simple algebraic linear equation like $y=β_0+β_1x_1+ε$ our model can also be expressed using matrix notation as:\n\n$$\nY=Xβ+ε\n$$\n\nWhile up until now we've only worked in the situation where $X$ is an $n\\times 2$ matrix with the first column full of 1s to correspond to the intercept term, there is no reason $X$ can't be $n\\times (p+1)$ where $p$ is any number of parameters we'd like to include in our quest to model $Y$. All we need to do is expand $β$ to be $(p+1)\\times 1$ to match.\n\nThe matrix approach to solve for $\\hatβ$ is still calculated by:\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY\n$$\n\nThis of course means that the solution for $β$ still requires $X^TX$ have an inverse. No inverse, no $\\hat{β}$, no matter the dimensions.\n\nWhat does this look like in practice? Consider the `hills` data set in the `MASS` library that contains the winning times for 35 Scottish hill races in 1984. These races range from a greulling 16km length with a climb of 7500 meters that takes hours to simpler runs of 3km rising 300 meters that are done in under 20 minutes. Since both distance and elevation change obviously play a role in the challenge presented by a race, it would make sense to include both distance and climb in a model predicting the winning time. We want a model that looks like:$winning \\space time=β_0+(β_1\\times distance) + (β_2 \\times climb) + ε$.\n\nThe matrix form of our model data is:\n\n$$\nY=\\begin{bmatrix}\n    16.083 \\\\\n    48.350 \\\\\n33.650\\\\\n    \\vdots \\\\\n159.833\\\\\n    \\end{bmatrix}\n and \\space \nX=\\begin{bmatrix}\n    1 & 2.5  & 650\\\\\n    1 & 6 & 2500\\\\\n 1 & 6 & 900 \\\\\n    \\vdots & \\vdots \\\\\n    1 & 20 & 5000\\\\\n\\end{bmatrix}\n$$ {#eq-orig_climb}\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY=\\begin{bmatrix}\n    -8.992 \\\\\n    6.218 \\\\\n0.011\\\\\n    \\end{bmatrix}\n$$\n\nThrough R we can obtain this same fit with:\n\n```{r}\nlibrary(MASS)\nmod_hills<-lm(time~dist+climb, data=hills)\nsummary(mod_hills)$coef\n```\n\nThe approach to using and interpreting this model is similar to if only one predictor term was used. To use it for prediction, we just plug in values of $x_1$ and $x_2$ and note the resulting $y$. For example, to estimate the winning race time for a new race that's 10km with an elevation change of 3100m, our our model would suggest $-8.992+(6.218\\times 10)+(0.011\\times 3100)=87.436$ minutes. The intercept tells us the winning race time expected for a hypothetical race that is 0km long with 0m climb: an end almost 9 minutes before the race begins. Not a meaningful answer but not a possible real race either. Our slopes are now in two different dimensions making for a fit plane in 3-dimensional space rather than a fit line. It also makes a plot of the data and the fit hard to do. Interpreting the slopes one by one we see that each additional km of distance adds, on average, about 6.2 minutes to the finishing time and each additional meter of climb adds, on average, 0.011 minutes which is less than one second.\n\n## Variance and Inference for $\\hat\\beta$\n\nFor standard errors in multiple regression we'll continue with the matrix notation for our model and rely more on your linear algebra skills. Start with:\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY\n$$\n\nSince our model is based on $Y=Xβ+ε$ we can then plug in $Xβ+ε$ for $Y$ to get:\n\n$$\\hatβ=(X^TX)^{-1}X^T(Xβ+ε)$$ which reduces to\n\n$$\\hatβ=β+(X^TX)^{-1}X^Tε$$\n\nthanks to $(X^TX)^{-1}X^TX=I$. Unlike our estimate $\\hatβ$, the parameter $β$ is an unknown constant and therefore has zero variance. This means $$var(\\hatβ)=var((X^TX)^{-1}X^Tε)$$\n\nA property of random vectors says that if $A$ is a matrix and $v$ a random vector, then $var(Av)=A var(v)A^T$. Applying that, we now can express $var(\\hatβ)$ as:\n\n$$\nvar(\\hatβ)=(X^TX)^{-1}X^Tvar(ε)X(X^TX)^{-1}\n$$ {#eq-vartrick}\n\nRecall one of our big assumptions is that $Var(ε)$ is constant. As part of that, we denote $Var(ε)$ as simply $\\sigma^2I$ where $\\sigma$ is that constant variance. So now:\n\n$$\nvar(\\hatβ)=(X^TX)XT^{-1}\\sigma^2IX(X^TX)^{-1}\n$$\n\n$$\nvar(\\hatβ)=\\sigma^2I(X^TX)^{-1}X^TX(X^TX)^{-1}\n$$\n\n$$\nvar(\\hatβ)=\\sigma^2I(X^TX)^{-1}\n$$\n\nThis is what R is doing under the hood when it produces your column of standard errors for the model summary output. This holds whether $\\hat\\beta$ is a simple $2\\times1$ vector with an intercept and slope for a single predictor like we saw back in Chapter 3, or whether $\\hat\\beta$ is a much larger $(p+1)\\times1$ vector with an intercept and slopes for $p$ predictors.\n\nAn example demonstrating this in R on the hill race model:\n\n```{r}\nxmat<-matrix(c(rep(1, nrow(hills)), hills$dist, hills$climb), ncol=3)\n\nsigma<-summary(mod_hills)$sigma\n\nvar_b<-(sigma^2)*solve(t(xmat)%*%xmat)\n\n#diagonal is the variance of each beta, off-diagonals are covariances\nvar_b\n\n#but standard errors are square-roots of variances\nc(sqrt(var_b[1,1]), sqrt(var_b[2,2]), sqrt(var_b[3,3]))\n\n#compare to output from model summary\nsummary(mod_hills)$coef\n```\n\nWhy does variance of $\\hat\\beta$ matter? Inference in multiple regression is just like inference in the single-predictor simple linear regression with confidence intervals that take the form of:$$\npoint\\: estimate \\pm multiplier\\times standard \\: error \n$$and hypothesis test statistics have the general format of:\n\n$$\n\\frac{observed \\: value - hypothesized\\: value}{standard\\: error}\n$$\n\nso obviously standard error is a key element of both. Confidence intervals for each $\\beta$ coefficient can be estimated from $\\hat\\beta_i \\pm t_{\\alpha/2}\\times SE_{\\hat\\beta_i}$ where $t$ has $n-(p+1)$ degrees of freedom and tests of $\\beta_i=0$ have a test statistic of $t=\\hat\\beta_i/SE_{\\hat\\beta_i}$ with p-values calculated from a $t_{n-(p+1)}$ distribution.\n\nThe easiest way to do confidence intervals for $\\beta$ in R is still the `confint` function as seen earlier with single predictor models.\n\n```{r}\nmod_hills<-lm(time~dist+climb, data=hills)\nconfint(mod_hills, level=.9)\n```\n\nFor hypothesis tests on $\\beta$, all of the information you need for the most common test of $H_0:\\beta_i=0$ is given in the model summary output. If instead you are interested in testing $H_0:\\beta_i=b$ for some value $b$, you can simply calculate your test statistic from the standard error as given in the model summary table, and the corresponding p-value using the `pt` function. For example, if we wanted to test the hypothesis that each additional km of distance added an average of more than 5 minutes to the race time, that would be testing $H_0:\\beta_{dist}\\leq5$ with $H_A:\\beta_{dist}>5$. The test statistic would be calculated as:\n\n```{r}\nsummary(mod_hills)$coef\n\n#using estimate and std. error for dist:\nt_stat<-(6.217956-5)/0.601148\n\n#find upper tail since alternative is upper tail\npt(t_stat, nrow(hills)-3, lower.tail = FALSE)\n```\n\nWith an $\\alpha=0.05$, this is sufficient evidence that the mean increase in race time for every additional km of distance is indeed greater than 5 minutes.\n\n## Variance and Inference for fitted Y\n\nRecall $\\hat y=X\\hat\\beta=Hy$ where $H=X(X^TX)^{-1}X^T$ and is known as the \"hat\" matrix. Therefore, $var(\\hat y)=Hvar(y)H^T$ using the same property applied in @eq-vartrick. Fun fact about $H$: it is both symmetric and idempotent. This means $H=H^T$ and $HH=H$. Assuming $Y$ is distributed $N(X\\beta, \\sigma^2)$ we can then plug in $\\sigma^2I$ for $var(y)$ yielding:\n\n$$\nvar(\\hat y)=\\sigma^2H\n$$\n\nwhich means the variance for any specific fitted $\\hat {y_i}$ is:\n\n$$\nvar(\\hat y)=\\sigma^2h_{ii}\n$$ {#eq-hatdiagvar}\n\nthe variance of y, multiplied by the $i^{th}$ diagonal of the hat matrix.\n\nThis is great, but more often in regression we aren't interested in just the variance of specific fitted values for the data set the model trained on. Usually un-observed $x^*$ values are plugged in to our fitted model to estimate additional $y$ outcomes. When that's the case there is no $h_{ii}$ that applies. This takes us back to $\\hat y=X\\hat\\beta$ but now instead of the full $X$ we only have the vector $x_*$ so:\n\n$$var(\\hat y_*)=\\sigma^2 x_*^T(X^TX)^{-1}x_*$$ This is the same as formula you saw for the simple linear case back in chapter 3: $$\nSE_{\\bar{Y}|x_*}=S_R\\sqrt{\\frac{1}{n}+\\frac{(x_*-\\bar{x})^2}{\\sum{(x_i-\\bar{x})^2}}}\n$$ {#eq-vary}\n\nThe matrix algebra is what's going on behind the scenes in R no matter how many predictors you have. Writing it out longhand as in @eq-vary is much harder to do for multiple predictors, but seeing it that way for the simple case makes it easier to see that when $x_*$ values are close to the mean $x$ values the standard error is smaller making the resulting intervals narrower.\n\nThe `predict` function used for confidence and prediction intervals for $y_*$ in the simple linear case continues to do the job for multiple regression models.\n\nConsider the 90% prediction intervals below for a race with a distance of 7km and climb of 1800m (values near the respective means) and a race with a distance 23km and a climb of 6000m (more unusual but within the range observed in the training set).\n\n```{r}\nnew_races<-data.frame(dist=c(7, 23), climb=c(1800, 6000))\npredict(mod_hills, new_races, interval=\"prediction\", level=.9)\n```\n\nThe race first race has a narrower interval because it involves $x_*$ nearer the center of the training $X$ values.\n\n## Transformations\n\n### Units change on one term\n\nWe begin with the simplest type of transformation on a single predictor: a unit change. Maybe meters of climb isn't the unit of measurement we want to use for climb in our hill racing model. Let's change it so that we can get the amount of time added per km of climb so that the units on climb will match the units on distance. That means instead of what we saw earlier in @eq-orig_climb now:\n\n$$\nY=\\begin{bmatrix}\n    16.083 \\\\\n    48.350 \\\\\n33.650\\\\\n    \\vdots \\\\\n159.833\\\\\n    \\end{bmatrix}\n and \\space \nX=\\begin{bmatrix}\n    1 & 2.5  & 0.650\\\\\n    1 & 6 & 2.5\\\\\n 1 & 6 & 0.9 \\\\\n    \\vdots & \\vdots \\\\\n    1 & 20 & 5.0\\\\\n\\end{bmatrix}\n$$\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY=\\begin{bmatrix}\n    -8.992 \\\\\n    6.218 \\\\\n11.048\\\\\n    \\end{bmatrix}\n$$\n\nOr through R code:\n\n```{r}\nclimb_km<-hills$climb/1000\nmod_hills2<-lm(time~dist+climb_km, data=hills)\nsummary(mod_hills2)$coef\n```\n\nWhich makes perfect sense and behaves just as we saw in the simple linear example from Chapter 5: we divided our $x_2$ by 1000, so to get the same result from $β_2 \\times x_2$ the value of ${β_2}$ would need to increase by a factor of 1000. And now our interpretation includes that the winning time increase by about 11 minutes on average for every km of climb added.\n\nAny time you want to make a units change on a predictor term the $β$ estimate for the associated variable will simply change by the inverse and all other β will be unaffected. Standard errors will change in scale as well which will leave you with parameter test statistics and p-values that are unchanged. The quality of your fit as measured by $R^2$ won't change at all either so use whatever scales you'd like predictor by predictor.\n\n### One or more X terms\n\n```{r}\n#| label: fig-mtcar4\n#| fig-cap: Displacement Transformations and Residuals\n#| fig-subcap: \n#| - Displacement Squared\n#| - Square-root Displacement\n#| - Inverse Displacement\n#| - Log Displacement\n#| echo: false\n#| layout-ncol: 2\n#| layout-nrow: 2\n\npar(mar=c(4,1,1,1))\nattach(mtcars)\nmdisp<-lm(mpg~hp+drat+wt, data=mtcars)\nplot(disp^2, mdisp$resid, xlab=\"Displacement Squared\", ylab=\"Residuals, no disp\", pch=16)\nplot(disp^.5, mdisp$resid, xlab=\"Sqrt Displacement\", ylab=\"Residuals, no disp\", pch=16)\nplot(1/disp, mdisp$resid, xlab=\"Inverse Displacement\", ylab=\"Residuals, no disp\", pch=16)\nplot(log(disp), mdisp$resid, xlab=\"Log Displacement\", ylab=\"Residuals, no disp\", pch=16)\n\n```\n\n```{r}\n#| label: fig-mtcar5\n#| fig-cap: Motor Trend Car Data\n#| fig-subcap: \n#| - Model with Displacement^2 plus HP, Axle Ratio, and Wt\n#| echo: false\n#| fig-width: 5\n\npar(mar=c(4,3,1,1))\nmod_mt2<-lm(mpg~I(disp^2)+hp+drat+wt)\nplot(mod_mt2$fitted, mod_mt2$resid, xlab=\"Fitted MPG\", ylab=\"Model Residuals\")\nabline(h=0, col=2, lwd=3)\n```\n\n```{r}\n#| label: fig-hills3\n#| fig-cap: Scottish Hill Races, Log transformations\n#| fig-subcap: \n#| - Log(dist) vs. residuals of time~climb\n#| - Log(climb) vs. residuals of time~dist\n#| echo: false\n#| fig-align: center\n#| fig-height: 3\n#| fig-width: 4\n#| layout-ncol: 2\n\npar(mar=c(4,4,1,1))\nmdist<-lm(time~dist, data=hills)\nmclimb<-lm(time~climb, data=hills)\nplot(log(hills$dist), mclimb$resid, xlab=\"Log Distance (km)\", ylab=\"time~climb residuals\")\nplot(log(hills$climb), mdist$resid, xlab=\"Log Climb (m)\", ylab=\"time~dist residuals\")\n```\n\n### Transforming Y\n\nWhy would you want to transform Y instead of one or more of your X terms? Well, what if what you really want for the format of your model is $y=e^{\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon}$ ? You aren't able to fit that type of relationship directly with the least-squares regression methods we've covered, but you could use a log transform on y and then fit $log(y)=\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon$ without any trouble. Generally, any time you think the relationship at hand is of the form $y=f(\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon)$ the solution is to transform your $y$ with $f'$ and fit the $f'(y)=\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon$ model.\n\n## Plotting for Multiple Regression\n\nWhile the basics of fitting a model and using it for inference are largely unchanged from our simple linear regression modeling, expanding beyond one independent predictor variable in our model makes plotting the data more complicated (but also more vital). It's more complicated because we can generally only plot two continuous dimensions at a time (in a way our brains can understand) simply because our screens (and paper) are two-dimensional, but more vital because there are now even more nuances to the relationships of the variables that we need to know about.\n\nA good first step is to look at the simple pairwise relationships between each indpendent $x$ predictor and the dependent outcome $y$. This means for the hill data we'd consider the plots shown in @fig-hillplot2.\n\n```{r}\n#| label: fig-hillplot2\n#| fig-cap: Scottish Hill Race Data\n#| fig-subcap: \n#| - Distance and Time\n#| - Climb and Time\n#| echo: false\n#| layout-nrow: 1\n\npar(mar=c(4,4,1,1))\nplot(hills$dist, hills$time, xlab=\"Distance\", ylab=\"Time\", pch=16)\nmdist<-lm(time~dist, data=hills)\nabline(mdist, col=\"dodgerblue\", lwd=3)\ntext(24.5, 30, paste(\"R^2=\", round(summary(mdist)$r.sq, 3)), cex=1.2)\n\nplot(hills$climb, hills$time, xlab=\"Elevation Climb\", ylab=\"Time\", pch=16)\nmclimb<-lm(time~climb, data=hills)\nabline(mclimb, col=\"dodgerblue\", lwd=3)\ntext(6700, 30, paste(\"R^2=\", round(summary(mclimb)$r.sq, 3)), cex=1.2)\n\n```\n\nFrom @fig-hillplot2 it is clearly seen that both the distance of the race and the elevation climb of the race are reasonably linearly related to our outcome of race record time. $R^2$ values for the two simple linear models tell us that distance alone explains 84.6% of the variability in race time and elevation climb explains 64.8% of race time variability. The next step now is to consider how your independent variables relate to each other.\n\n```{r}\n#| label: fig-hillplot3\n#| fig-cap: Scottish Hill Race Distance and Elevation Climb\n#| echo: false\n#| layout-nrow: 1\n#| fig-width: 3.5\n#| fig-height: 2.5\n\npar(mar=c(4,4,1,1))\nplot(hills$dist, hills$climb, xlab=\"Distance\", ylab=\"Elevation Climb\", pch=16)\n\nmdc<-lm(climb~dist, data=hills)\nabline(mdc, col=\"dodgerblue\", lwd=3)\ntext(6, 7000, paste(\"R^2=\", round(summary(mdc)$r.sq, 3)), cex=.8)\n```\n\nThis is the relationship shown in @fig-hillplot3. As one might expect, race distance and elevation change are related to each other. This makes intuitive sense since longer races have greater opportunity for changes in elevation. You aren't going to have a race that increases 3000 meters in elevation but is only 1 km long - that's just too steep to be at all safe (or enjoyable). The $R^2$ of a linear model predicting climb as a function of distance is 42.6%. Why is this important when working to predict time? Well if distance gets us 84.6% of the way to explaining time, and climb gets us 64.8% of the way to explaining time, clearly there must be some overlap in the value they offer since 0.846+0.648\\>1. The 42.6% is a measure of the overlap.\n\n### Added Variable Plot (aka Partial Regression Plot)\n\nThe ***Added Variable Plot***, also sometimes referred to as a ***Partial Regression Plot***, is a tool for capturing how much value an additional independent variable offers in predicting your dependent variable. The plot contains the residuals from two different linear models. First, the x-axis is the residuals from a model predicting $x_2$ using $x_1$. Then, the y-axis is the residuals of a model predicting y using only only $x_1$. To put this another way, the added variable plot shows the relationship between the variability of your possible new predictor term given the existing predictor compared to the variability that remains in your dependent variable after the first predictor is considered.\n\n```{r}\n#| label: fig-hillplot4\n#| fig-cap: Added Variable Plots\n#| fig-subcap: \n#| - Adding Climb to Distance Only\n#| - Adding Distance to Climb Only\n#| echo: false\n#| layout-ncol: 2\n#| fig-height: 3.5\n#| fig-pos: \"H\"\n\npar(mar=c(4,4,1,2))\nmclid<-lm(climb~dist, data=hills)\nplot(mclid$resid, mdist$resid, xlab=\"Climb|Dist Residuals\", ylab=\"Time|Dist Residuals\", pch=16)\n\nmplusclimb<-lm(mdist$resid~mclid$resid)\nabline(mplusclimb, col=\"dodgerblue\", lwd=3)\ntext(-2800, 70, paste(\"y=\", round(mplusclimb$coef[1],3), \"+\", round(mplusclimb$coef[2],4), \"x\"))\n\nmdisc<-lm(dist~climb, data=hills)\nplot(mdisc$resid, mclimb$resid, xlab=\"Dist|Climb Residuals\", ylab=\"Time|Climb Residuals\", pch=16)\n\nmplusdist<-lm(mclimb$resid~mdisc$resid)\nabline(mplusdist, col=\"dodgerblue\", lwd=3)\ntext(-1, 117, paste(\"y=\", round(mplusdist$coef[1],3), \"+\", round(mplusdist$coef[2],4), \"x\"))\n```\n\n@fig-hillplot4 shows two added variable plots. @fig-hillplot4 (a) shows the plot assessing the value climb offers in predicting time after distance, and @fig-hillplot4 (b) assesses the value of adding distance if climb was included first. Equations of the least-squares regression lines are given in the top left corners.\n\nNote that the equations both have an intercept of zero. That's because, as you should recall, 1) fitted regression lines always pass through the mean of X and the mean of Y, and 2) our X and Y in these cases are both residuals and the mean residual from a linear regression model is always zero. The slopes from these fits are worth noting though.\n\nWhen the multiple regression model is fit including distance and climb together, notice the slopes for the distance and climb terms exactly match the slopes from the added variable plots.\n\n```{r}\n#| echo: true\nmhill<-lm(time~dist+climb, data=hills)\nsummary(mhill)$coef\n```\n\nNow let's expand beyond our two-predictor hill race model and look at a larger data set with multiple predictors. @fig-mtcar1 shows a scatterplot matrix for the first 6 columns of the `mtcar` data frame we've worked with earlier.\n\n```{r}\n#| label: fig-mtcar1\n#| echo: false\n#| fig-cap: Motor Trend Car Data\n#| fig-height: 5\n#| layout-valign: \"top\"\n\n\npar(mar=c(4,4,1,1))\nplot(mtcars[,1:6])\n```\n\nAcross the top row you can see that all of the available independent variables are strong potential predictors of fuel efficiency (MPG). Some terms may warrant some transformation given apparent curvature in the mpg-displacement and mpg-hp plots, but all indicate they could be useful in a model for MPG. Other scatterplots in the matrix show us that many of these terms are closely related to each other as well so we know there is overlap in the value they offer to predict MPG.\n\nWe start with the model $mpg=β_0+β_1wt+β_2cyl+ε$ because vehicle weight and the number of engine cylinders should have the strongest influence on fuel efficiency. From there, the question is how much would our model improve if drat, the rear axle ratio, were added? From our initial scatterplot matrix drat's relationship with mpg appears reasonably linear so there shouldn't be any transformations to worry about.\n\n```{r}\n#| label: fig-mtcar2\n#| fig-cap: Added Variable Plot, Rear Axle Ratio\n#| echo: false\n#| fig-height: 2.5\n#| fig-width: 3.5\n\n\npar(mar=c(4,4,1,1))\nmod_mt1<-lm(mpg~cyl+wt, data=mtcars)\nmoddr<-lm(drat~cyl+wt, data=mtcars)\nplot(moddr$resid, mod_mt1$resid, xlab=\"drat | cyl+wt residuals\", ylab=\"MPG | cyl+wt residuals\", pch=16)\n\nmtemp<-lm(mod_mt1$resid~moddr$resid)\nabline(mtemp, col=\"dodgerblue\", lwd=3)\ntext(-.65, 5.5, paste(\"R^2=\", round(summary(mtemp)$r.sq,4)))\n```\n\nThe added variable plot for drat given in @fig-mtcar2 shows that there is no real additional value that drat offers when cylinders and weight are already in the model. The relationship between the residuals from drat modeled by cylinders+weight and the residuals of mpg modeled by cylinders+weight appears completely random; has a best fit line that is virtually horizontal, and a correlation that is zero.\n\nAfter seeing this plot, it should come as no surprise that when a model is fit predicting MPG as a function of cylinders+weight+axle ratio the axle ratio term is not statistically significant.\n\n```{r}\n#| echo: true\nm_cars<-lm(mpg~cyl+wt+drat, data=mtcars)\nsummary(m_cars)$coef\n```\n\n#### In R {.unnumbered}\n\n@fig-hillplot2 and @fig-mtcar2 show added variable plots put together manually using basic plotting functionality in R. There's also the `avPlot` function in the `car` library that will produce added variable plots directly with much less effort. All you need to specify in `avPlot` is the name of the full fitted model object, and the name of the variable you want to consider as the possible add/drop term. The variable name needs to be put in quotation marks. First, an example using the `avPlot` function on the hill race data:\n\n```{r}\n#| echo: false\nlibrary(car, quietly=TRUE)\npar(mar=c(4,4,1,1))\n```\n\n```{r}\n#| label: fig-hillplot5\n#| fig-cap: Added Variable Plots\n#| fig-subcap: \n#| - Climb plot\n#| - Distance plot\n#| echo: true\n#| layout-ncol: 2\n#| fig-height: 4.25\n#| fig-pos: \"H\"\n\nmhills<-lm(time~climb+dist, data=hills)\navPlot(mhills, \"climb\")\navPlot(mhills, \"dist\")\n```\n\nAnd here is the `mtcar` model example with identification of unusual points removed:\n\n```{r}\n#| label: fig-mtcar3\n#| fig-cap: Added Variable Plot for Axle Ratio\n#| echo: true\n#| fig-height: 3.25\n#| fig-width: 4.25\n#| fig-pos: \"H\"\n\nmcars<-lm(mpg~cyl+wt+drat, data=mtcars)\navPlot(mcars, \"drat\", id=FALSE)\n```\n\nIf you want to quickly produce all added variable plots for a model, you can use the `avPlots` command. Just add that `s` to the command name and simply providing the model object will create all plots.\n\n```{r}\n#| echo: true\n#| fig-height: 3.5 \n#| fig-width: 7\navPlots(mhills)\n```\n\n### Partial Residual Plot\n\nThere's another useful plot to know about when working with multiple regression: the ***Partial Residual Plot***. A partial residual plot is another way to look at how each predictor plays a role in a model with multiple independent variables.\n\nTo investigate $x_i$ using a partial residual plot, first fit a model with all independent terms of interest included. The x-axis is then $x_i$, and the y-axis is the residuals from your full model $+β_ix_i$. @fig-hills_partres shows these plots for distance and elevation climb as predictors for race time in the hill race data. The partial residual plots produced by R by default have two helpful overlaid lines: a dashed blue line showing the best linear fit, and a more free-form line showing the pattern followed by the points.\n\n```{r}\n#| label: fig-hills_partres\n#| fig-cap: Partial residual plots, Hill Races\n#| fig-subcap: \n#| - Distance\n#| - Elevation Climb\n#| echo: false\n#| fig-height: 3.25\n#| fig-width: 3.75\n#| layout-ncol: 2\n\nmodh<-lm(time~dist+climb, data=hills)\nlibrary(car, quietly = TRUE)\ncrPlot(modh, \"dist\")\ncrPlot(modh, \"climb\")\n\n```\n\nIn this example, the pink line for distance follows the blue dashed line fairly well as shown in @fig-hills_partres (a). The curvature shown in the pink line for the partial residual plot for climb in @fig-hills_partres (b) however, indicates a transformation on climb might make for an even better model. Specifically, it appears that squaring climb might straighten the relationship out.\n\nTo investigate this, consider the plots in @fig-hills_partres2 showing (a) the partial residual plot when $climb^2$ is used in the model and (b) the partial residual plot when $climb^3$ in the model. The $climb^2$ model is a definite improvement over the original, but still not quite right. The $climb^3$ model straightens the pink curve further to the point that it aligns nearly perfectly with the dashed blue line.\n\n```{r}\n#| label: fig-hills_partres2\n#| fig-cap: Partial residual plots, Climb transformed\n#| fig-subcap: \n#| - Climb Squared\n#| - Climb Cubed\n#| echo: false\n#| fig-height: 3.25\n#| fig-width: 3.75\n#| layout-ncol: 2\n#| fig-pos: \"H\"\n\nclimb2<-hills$climb^2\nclimb3<-hills$climb^3\nmodh2<-lm(hills$time~hills$dist+climb2)\ncrPlot(modh2, \"climb2\")\nmodh3<-lm(hills$time~hills$dist+climb3)\ncrPlot(modh3, \"climb3\")\n\n```\n\nUsing this, we can update our model for winning time to use $climb^3$, and then evaluate the fit and model assumptions. @fig-hills_newmod3 shows the fitted vs. residual plots for both the basic model with $climb$ directly and the approach and the $climb^3$ model.\n\n```{r}\n#| label: fig-hills_newmod3\n#| fig-cap: Fitted vs. Residual Plots\n#| fig-subcap: \n#| - Dist + Climb model\n#| - Dist + Climb$^3$ model\n#| echo: false\n#| fig-height: 3.75\n#| fig-width: 3.9\n#| layout-ncol: 2\n\nmodh1<-lm(hills$time~hills$dist+hills$climb)\nmodh3<-lm(hills$time~hills$dist+climb3)\n\nplot(modh1$fitted, modh1$resid, pch=16, xlab=\"Fitted\", ylab=\"Residuals\")\nabline(h=0, col=2, lwd=3)\n\nplot(modh3$fitted, modh3$resid, pch=16, xlab=\"Fitted\", ylab=\"Residuals\")\nabline(h=0, col=2, lwd=3)\n```\n\nThis shows there is one extreme outlier with a residual greater than 50 that is present in both approaches. We can also see that the basic model does exhibit some curvature that appears fully corrected in the $climb^3$ model. Homoskedasticity appears much improved in the new model as well.\n\nHow do partial residual plots look for our more complex `mtcars` example? Consider @fig-mtcars_partres. The plot for weight shows slight, but non-consistent deviation from the line. The plot for cylinders suggests perhaps a simple transformation might improve the fit. And the plot for drat, the measure of the rear axle ratio, definitely shows curvature away from a horizontal line. This horizontal line confirms what we saw with the added variable plot: inclusion of the term won't significantly help predict MPG at all.\n\n```{r}\n#| label: fig-mtcars_partres\n#| fig-cap: Partial Residual Plots\n#| fig-subcap: \n#| - Cylinders\n#| - Weight\n#| - Rear Axle Ratio\n#| echo: false\n#| fig-height: 3.5\n#| fig-width: 3.75\n#| layout-ncol: 3\n#| fig-pos: \"H\"\n\nmcar<-lm(mpg~cyl+wt+drat)\ncrPlot(mcar, \"cyl\")\ncrPlot(mcar, \"wt\")\ncrPlot(mcar, \"drat\")\n```\n\nIf cylinders is transformed to be included in the model as $1/cylinders$ then the updated partial residual plot becomes what is shown in @fig-invcyl (a) and the resulting fitted vs. residual plot for the weight+inverse cylinders model is as shown in @fig-invcyl (b). The $R^2$ of the model fit with cylinders inverted is very slightly increased over the initial model with simply weight+cylinders, 0.837 vs 0.830, making it a matter of scientist discretion if the added complexity of inverting cylinders is worth the minimal fit improvement.\n\n```{r}\n#| label: fig-invcyl\n#| echo: false\n#| fig-cap: Weight + 1/cylinders\n#| fig-height: 3.55\n#| fig-pos: H\n#| fig-subcap: Inverse Cylinders Partial Residual Plot,Fitted vs. Residual\n#| fig-width: 3.75\n#| layout-ncol: 2\n\ncyl2<-1/mtcars$cyl\nmcar2<-lm(mpg~cyl2+wt, data=mtcars)\ncrPlot(mcar2, \"cyl2\")\n\nplot(mcar2$fitted.values, mcar2$residuals, pch=16, xlab=\"Fitted\", ylab=\"Residuals\")\nabline(h=0, col=2, lwd=3)\n```\n\n```{r}\nmod_car<-lm(mpg~wt+cyl, data=mtcars)\nmod_car2<-lm(mpg~wt+I(1/cyl), data=mtcars)\n\nc(summary(mod_car)$r.square, summary(mod_car2)$r.square)\n```\n\n#### In R {.unnumbered}\n\nLike the `avPlot` function, the partial residual plot function is in the `car` library. `crPlot` creates the partial residual plots with a minimum of two inputs: the full fitted model object, and the name of the variable you want to focus on. Make sure you put the variable name in quotation marks.\n\nThe code to produce @fig-hills_partres was simply:\n\n```{r}\n#| eval: false\n#| include: true\n\nmodh<-lm(time~dist+climb, data=hills)\ncrPlot(modh, \"dist\")\ncrPlot(modh, \"climb\")\n```\n\nAs seen with `avPlot`, there is also a plural version of the `crPlot` command. `crPlots` will create all possible partial residual plots for a specified model. Where does the name \"crPlot\" come from? The y-axis is the component of interest plus the model residual: \"cr\" is short for \"component + residual\".\n\n### Inverse Response Plot\n\nWhen in a situation where transforming Y is your best course of action, an ***Inverse Response Plot*** can help. For this we'll create two dummy examples so the real relationship is fully known. Let's create 50 rows of three independent columns, \"A\", \"B\", and \"C\", where each is a created from a random sample from a Uniform\\[0,5\\]. Then we'll make Y1 and Y2 where $Y_1=(A+2B+3C)^2+\\epsilon$ and $Y_2=e^{A+B+C}+\\epsilon$ using a Normal(0, 1) for the $\\epsilon$ noise component.\n\n```{r}\nset.seed(123)\nA<-runif(50, 0, 5)\nB<-runif(50, 0, 5)\nC<-runif(50, 0, 5)\n\nY1<-(A+2*B+3*C)^2 + rnorm(50)\nY2<-exp(A+B+C) + rnorm(50)\n```\n\nIf we start by looking at simple plots of A, B, and C plotted against Y1, and against Y2, it is not immediately clear that transforming our Ys is what needs to happen (see @fig-fake1).\n\n```{r}\n#| echo: false\n#| label: fig-fake1\n#| fig-cap: Simple Scatter Plots\n#| fig-subcap: \n#| - A vs. Y1\n#| - B vs. Y1\n#| - C vs. Y1\n#| - A vs. Y2\n#| - B vs. Y2\n#| - C vs. Y2\n#| layout-ncol: 3\n#| layout-nrow: 2\n#| fig-pos: \"H\"\nplot(A, Y1, pch=16)\nplot(B, Y1, pch=16)\nplot(C, Y1, pch=16)\nplot(A, Y2, pch=16)\nplot(B, Y2, pch=16)\nplot(C, Y2, pch=16)\n\n```\n\nIf we fit the basic models for Y1 and Y2 as functions of A, B, and C we get fitted vs. residual plots as shown in @fig-fake2 which clearly indicate there is a strong non-linear relationship at play and a transformation somewhere is warranted.\n\n```{r}\n#| echo: false\n#| label: fig-fake2\n#| fig-cap: Fitted vs. Residuals\n#| fig-subcap: \n#| - Y1~A+B+C Fitted vs. Residual\n#| - Y2~A+B+C Fitted vs. Residual\n#| layout-ncol: 2\n\nmod1<-lm(Y1~A+B+C)\nplot(mod1$fitted, mod1$residuals)\n\nmod2<-lm(Y2~A+B+C)\nplot(mod2$fitted, mod2$residuals)\n```\n\nSo let's look at the partial residual plots for A, B, and C to find out where to transform. These are shown in @fig-fake3 and none look to have significant curvature in their pink line fits.\n\n```{r}\n#| echo: false\n#| label: fig-fake3\n#| fig-cap: Partial Residual Plots\n#| fig-subcap: \n#| - A in model of Y1\n#| - B in model of Y1\n#| - C in model of Y1\n#| - A in model of Y2\n#| - B in model of Y2\n#| - C in model of Y2\n#| layout-ncol: 3\n#| layout-nrow: 2\n#| fig-height: 4\n#| fig-pos: \"H\"\n\ncrPlot(mod1, \"A\")\ncrPlot(mod1, \"B\")\ncrPlot(mod1, \"C\")\ncrPlot(mod2, \"A\")\ncrPlot(mod2, \"B\")\ncrPlot(mod2, \"C\")\n```\n\nIf none of the X predictor terms are the source, consider the response Y as needing the transformation by looking at a plot of the fitted value of Y on the x-axis, vs the observed Y values on the y-axis. This is called the ***Inverse Response Plot*** and if Y needs a transformation, the shape of the curve in the inverse response plot will tell you which one you need.\n\n```{r}\n#| echo: false\n#| label: fig-fake4\n#| fig-cap: Inverse Response Plots\n#| fig-subcap: \n#| - Inverse Response Y1\n#| - Inverse Response Y2\n#| layout-ncol: 2\n#| fig-height: 4\n#| fig-pos: \"H\"\n\nplot(mod1$fitted.values, Y1, xlab=\"Mod 1 Fitted Values\")\nplot(mod2$fitted.values, Y2, xlab=\"Mod 2 Fitted Values\")\n\n```\n\nSure enough, the inverse response plot for Y1 is a curve that follows an $x^2$ curve shape which aligns with us needing to apply a square-root to Y1 to make it linear, and the inverse response plot for Y2 is a curve that follows an exponential curve shape indicating to us that a log transformation for Y2 is the way to go. Both just as our data was created.\n\n## Multicollinearity {#sec-multico}\n\nWhen two or more independent variables are highly correlated with each other, your multiple regression model suffers from a problem known as multicollinearity. At issue is the fact that this correlation undermines the assumption that independent random variables are in fact *independent*, which is critical for accurately estimating their individual impacts on the dependent variable you're predicting.\n\nSometimes multicollinearity arises because of a choice the modeler has made that is easily corrected. For example, in a health study rather than including both the weight of a patient and the patient body mass index, you can just select one as a measure of patient size and move on. Often though the choice isn't quite so simple as the variables might very naturally move together while at the same time each providing valuable insight.\n\nThe problem is that having highly correlated independent variables makes the standard errors of the estimated regression coefficients increase. This means your confidence intervals are wider and you're less able to identify when a term is significantly different from zero or any other key value of interest. Multicollinearity can also lead to coefficients changing notably, even changing signs unexpectedly, with relatively minor changes to the data or the model.\n\nFor an example, let's look at the `fgl` data frame from the `MASS` library. This data frame considers the refractive index of 214 fragments of six different types of glass and their oxide makeup. We'll start with the full model that includes all available predictors of refractive index:\n\n```{r}\n#| echo: true\nmod_glass<-lm(RI~., data=fgl)\nsummary(mod_glass)\n```\n\nThis model summary tells us a few things. First, you'll notice that many of our independent variables do not appear significant - many p-values are well above any reasonable $\\alpha$ level. You can also see that two glass types that are most different from each other are vehicle window glass, with a -0.88579 slope and vehicle headlight glass with a 1.58 slope. This kind of makes sense that they would differ from the other types because the thick safety glass of vehicle windows is very different from the type of glass used to make regular home windows or tableware. Similarly, glass for headlights is also very different from your drinking glass but in an entirely different way. These observations aside though, the $R^2=0.9081$ does indicate the model does a fairly good job at predicting the refractive index of glass given the glass components.\n\nNow consider a reduced model that reduces glass type down to only three levels: vehicle, headlight, or other, and only considers the Al, Si, Ca, and Ba elements.\n\n```{r}\n#| echo: true\n\nvehicle<-as.factor(fgl$type==\"Veh\")\nheadlight<-as.factor(fgl$type==\"Head\")\nmod_glass2<-lm(RI~Al+Si+Ca+Ba+vehicle+headlight, data=fgl)\nsummary(mod_glass2)\n```\n\nOur intercept is wildly different now. What do you notice about the coefficients for Al, Si, Ca and Ba for the second model compared to the first? The Al and Si slopes are more than twice what they were in the earlier model while the Ca and Ba ones decreased significantly. And look at the standard errors on those new coefficient estimates. Our large model had standard errors that were all in the .66 to .74 range, but now they are much much smaller. Si went from having a standard error of 0.6846 to one of only .09887. The model coefficient of determination, $R^2$, is only slightly decreased and still strong at 0.8941. What is going on here? Multicollinearity. Here is the correlation matrix (rounded to three decimal places) on our continuous independent variables:\n\n```{r}\nround(cor(fgl[,2:9]),3)\n```\n\nLooks like Mg is fairly strongly correlated with a few of the other terms. That's why the model wasn't hurt much by it's removal.\n\nIn addition to checking correlation matrices, the *variance inflation factor* is a good metric for flagging where multicollinearity is likely an issue. The variance inflation factor is defined as:\n\n$$\nVIF_i=\\frac{1}{1-R_i^2}\n$$\n\nWhere $R_i^2$ is the $R^2$ from a regression model predicting variable $i$ using all other predictors. So to examine the influence of Mg in our model we would look at how well Mg could be modeled linearly as a function of NA, Al, Si, K, Ca, Ba, Fe, and our two glass types:\n\n```{r}\nmod_Mg<-lm(Mg~Na+Al+Si+K+Ca+Ba+Fe+vehicle+headlight, data=fgl)\nsummary(mod_Mg)$r.square\n```\n\nSeems Mg can be almost entirely explained by the other terms. With a high $R_{Mg}^2$, that means $VIF_{Mg}$ will be large. In fact, $\\frac{1}{1-.9952}=208.42$. Values of $VIF>5$ are generally considered to be worth a closer look.\n\n#### In R {.unnumbered}\n\nFortunately, R will pretty easily provide you with all VIF metrics when provided with a full model under consideration. In the `car` library lives the `vif` function. Running all VIFs for our glass model is as simple as:\n\n```{r}\nmod_glass<-lm(RI~Na+Mg+Al+Si+K+Ca+Ba+Fe+vehicle+headlight, data=fgl)\nvif(mod_glass)\n```\n\nTaking away Mg as the term with the largest VIF, our new model with VIFs looks like:\n\n```{r}\nmod_glass2<-lm(RI~Na+Al+Si+K+Ca+Ba+Fe+vehicle+headlight, data=fgl)\nvif(mod_glass2)\n```\n\nShowing with that one omission, the bulk of our multicollinearity issue has been cleared up.\n","srcMarkdownNoYaml":"\n\n## Multiple Regression\n\nMultiple linear regression is just like simple linear regression, but instead of using only one independent variable $(X)$ to predict the outcome $(Y)$, it uses two or more independent variables at the same time. Each independent variable gets its own coefficient ( $β_1, β_2, β_3...$ etc.), representing its unique effect on the dependent variable while keeping the others constant. This allows you to see how each factor influences the outcome, controlling for the others.\n\nSo for a model with $p$ independent predictor terms, the model now takes the form:\n\n$$y=β_0+β_1x_1+β_2x_2+β_3x_3+...+β_px_p+ε$$As you can see, it gets to be a bit much to write out this long-form notation, hence the beauty and value of the alternative matrix approach. Recall that in addition to describing a linear regression model with a simple algebraic linear equation like $y=β_0+β_1x_1+ε$ our model can also be expressed using matrix notation as:\n\n$$\nY=Xβ+ε\n$$\n\nWhile up until now we've only worked in the situation where $X$ is an $n\\times 2$ matrix with the first column full of 1s to correspond to the intercept term, there is no reason $X$ can't be $n\\times (p+1)$ where $p$ is any number of parameters we'd like to include in our quest to model $Y$. All we need to do is expand $β$ to be $(p+1)\\times 1$ to match.\n\nThe matrix approach to solve for $\\hatβ$ is still calculated by:\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY\n$$\n\nThis of course means that the solution for $β$ still requires $X^TX$ have an inverse. No inverse, no $\\hat{β}$, no matter the dimensions.\n\nWhat does this look like in practice? Consider the `hills` data set in the `MASS` library that contains the winning times for 35 Scottish hill races in 1984. These races range from a greulling 16km length with a climb of 7500 meters that takes hours to simpler runs of 3km rising 300 meters that are done in under 20 minutes. Since both distance and elevation change obviously play a role in the challenge presented by a race, it would make sense to include both distance and climb in a model predicting the winning time. We want a model that looks like:$winning \\space time=β_0+(β_1\\times distance) + (β_2 \\times climb) + ε$.\n\nThe matrix form of our model data is:\n\n$$\nY=\\begin{bmatrix}\n    16.083 \\\\\n    48.350 \\\\\n33.650\\\\\n    \\vdots \\\\\n159.833\\\\\n    \\end{bmatrix}\n and \\space \nX=\\begin{bmatrix}\n    1 & 2.5  & 650\\\\\n    1 & 6 & 2500\\\\\n 1 & 6 & 900 \\\\\n    \\vdots & \\vdots \\\\\n    1 & 20 & 5000\\\\\n\\end{bmatrix}\n$$ {#eq-orig_climb}\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY=\\begin{bmatrix}\n    -8.992 \\\\\n    6.218 \\\\\n0.011\\\\\n    \\end{bmatrix}\n$$\n\nThrough R we can obtain this same fit with:\n\n```{r}\nlibrary(MASS)\nmod_hills<-lm(time~dist+climb, data=hills)\nsummary(mod_hills)$coef\n```\n\nThe approach to using and interpreting this model is similar to if only one predictor term was used. To use it for prediction, we just plug in values of $x_1$ and $x_2$ and note the resulting $y$. For example, to estimate the winning race time for a new race that's 10km with an elevation change of 3100m, our our model would suggest $-8.992+(6.218\\times 10)+(0.011\\times 3100)=87.436$ minutes. The intercept tells us the winning race time expected for a hypothetical race that is 0km long with 0m climb: an end almost 9 minutes before the race begins. Not a meaningful answer but not a possible real race either. Our slopes are now in two different dimensions making for a fit plane in 3-dimensional space rather than a fit line. It also makes a plot of the data and the fit hard to do. Interpreting the slopes one by one we see that each additional km of distance adds, on average, about 6.2 minutes to the finishing time and each additional meter of climb adds, on average, 0.011 minutes which is less than one second.\n\n## Variance and Inference for $\\hat\\beta$\n\nFor standard errors in multiple regression we'll continue with the matrix notation for our model and rely more on your linear algebra skills. Start with:\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY\n$$\n\nSince our model is based on $Y=Xβ+ε$ we can then plug in $Xβ+ε$ for $Y$ to get:\n\n$$\\hatβ=(X^TX)^{-1}X^T(Xβ+ε)$$ which reduces to\n\n$$\\hatβ=β+(X^TX)^{-1}X^Tε$$\n\nthanks to $(X^TX)^{-1}X^TX=I$. Unlike our estimate $\\hatβ$, the parameter $β$ is an unknown constant and therefore has zero variance. This means $$var(\\hatβ)=var((X^TX)^{-1}X^Tε)$$\n\nA property of random vectors says that if $A$ is a matrix and $v$ a random vector, then $var(Av)=A var(v)A^T$. Applying that, we now can express $var(\\hatβ)$ as:\n\n$$\nvar(\\hatβ)=(X^TX)^{-1}X^Tvar(ε)X(X^TX)^{-1}\n$$ {#eq-vartrick}\n\nRecall one of our big assumptions is that $Var(ε)$ is constant. As part of that, we denote $Var(ε)$ as simply $\\sigma^2I$ where $\\sigma$ is that constant variance. So now:\n\n$$\nvar(\\hatβ)=(X^TX)XT^{-1}\\sigma^2IX(X^TX)^{-1}\n$$\n\n$$\nvar(\\hatβ)=\\sigma^2I(X^TX)^{-1}X^TX(X^TX)^{-1}\n$$\n\n$$\nvar(\\hatβ)=\\sigma^2I(X^TX)^{-1}\n$$\n\nThis is what R is doing under the hood when it produces your column of standard errors for the model summary output. This holds whether $\\hat\\beta$ is a simple $2\\times1$ vector with an intercept and slope for a single predictor like we saw back in Chapter 3, or whether $\\hat\\beta$ is a much larger $(p+1)\\times1$ vector with an intercept and slopes for $p$ predictors.\n\nAn example demonstrating this in R on the hill race model:\n\n```{r}\nxmat<-matrix(c(rep(1, nrow(hills)), hills$dist, hills$climb), ncol=3)\n\nsigma<-summary(mod_hills)$sigma\n\nvar_b<-(sigma^2)*solve(t(xmat)%*%xmat)\n\n#diagonal is the variance of each beta, off-diagonals are covariances\nvar_b\n\n#but standard errors are square-roots of variances\nc(sqrt(var_b[1,1]), sqrt(var_b[2,2]), sqrt(var_b[3,3]))\n\n#compare to output from model summary\nsummary(mod_hills)$coef\n```\n\nWhy does variance of $\\hat\\beta$ matter? Inference in multiple regression is just like inference in the single-predictor simple linear regression with confidence intervals that take the form of:$$\npoint\\: estimate \\pm multiplier\\times standard \\: error \n$$and hypothesis test statistics have the general format of:\n\n$$\n\\frac{observed \\: value - hypothesized\\: value}{standard\\: error}\n$$\n\nso obviously standard error is a key element of both. Confidence intervals for each $\\beta$ coefficient can be estimated from $\\hat\\beta_i \\pm t_{\\alpha/2}\\times SE_{\\hat\\beta_i}$ where $t$ has $n-(p+1)$ degrees of freedom and tests of $\\beta_i=0$ have a test statistic of $t=\\hat\\beta_i/SE_{\\hat\\beta_i}$ with p-values calculated from a $t_{n-(p+1)}$ distribution.\n\nThe easiest way to do confidence intervals for $\\beta$ in R is still the `confint` function as seen earlier with single predictor models.\n\n```{r}\nmod_hills<-lm(time~dist+climb, data=hills)\nconfint(mod_hills, level=.9)\n```\n\nFor hypothesis tests on $\\beta$, all of the information you need for the most common test of $H_0:\\beta_i=0$ is given in the model summary output. If instead you are interested in testing $H_0:\\beta_i=b$ for some value $b$, you can simply calculate your test statistic from the standard error as given in the model summary table, and the corresponding p-value using the `pt` function. For example, if we wanted to test the hypothesis that each additional km of distance added an average of more than 5 minutes to the race time, that would be testing $H_0:\\beta_{dist}\\leq5$ with $H_A:\\beta_{dist}>5$. The test statistic would be calculated as:\n\n```{r}\nsummary(mod_hills)$coef\n\n#using estimate and std. error for dist:\nt_stat<-(6.217956-5)/0.601148\n\n#find upper tail since alternative is upper tail\npt(t_stat, nrow(hills)-3, lower.tail = FALSE)\n```\n\nWith an $\\alpha=0.05$, this is sufficient evidence that the mean increase in race time for every additional km of distance is indeed greater than 5 minutes.\n\n## Variance and Inference for fitted Y\n\nRecall $\\hat y=X\\hat\\beta=Hy$ where $H=X(X^TX)^{-1}X^T$ and is known as the \"hat\" matrix. Therefore, $var(\\hat y)=Hvar(y)H^T$ using the same property applied in @eq-vartrick. Fun fact about $H$: it is both symmetric and idempotent. This means $H=H^T$ and $HH=H$. Assuming $Y$ is distributed $N(X\\beta, \\sigma^2)$ we can then plug in $\\sigma^2I$ for $var(y)$ yielding:\n\n$$\nvar(\\hat y)=\\sigma^2H\n$$\n\nwhich means the variance for any specific fitted $\\hat {y_i}$ is:\n\n$$\nvar(\\hat y)=\\sigma^2h_{ii}\n$$ {#eq-hatdiagvar}\n\nthe variance of y, multiplied by the $i^{th}$ diagonal of the hat matrix.\n\nThis is great, but more often in regression we aren't interested in just the variance of specific fitted values for the data set the model trained on. Usually un-observed $x^*$ values are plugged in to our fitted model to estimate additional $y$ outcomes. When that's the case there is no $h_{ii}$ that applies. This takes us back to $\\hat y=X\\hat\\beta$ but now instead of the full $X$ we only have the vector $x_*$ so:\n\n$$var(\\hat y_*)=\\sigma^2 x_*^T(X^TX)^{-1}x_*$$ This is the same as formula you saw for the simple linear case back in chapter 3: $$\nSE_{\\bar{Y}|x_*}=S_R\\sqrt{\\frac{1}{n}+\\frac{(x_*-\\bar{x})^2}{\\sum{(x_i-\\bar{x})^2}}}\n$$ {#eq-vary}\n\nThe matrix algebra is what's going on behind the scenes in R no matter how many predictors you have. Writing it out longhand as in @eq-vary is much harder to do for multiple predictors, but seeing it that way for the simple case makes it easier to see that when $x_*$ values are close to the mean $x$ values the standard error is smaller making the resulting intervals narrower.\n\nThe `predict` function used for confidence and prediction intervals for $y_*$ in the simple linear case continues to do the job for multiple regression models.\n\nConsider the 90% prediction intervals below for a race with a distance of 7km and climb of 1800m (values near the respective means) and a race with a distance 23km and a climb of 6000m (more unusual but within the range observed in the training set).\n\n```{r}\nnew_races<-data.frame(dist=c(7, 23), climb=c(1800, 6000))\npredict(mod_hills, new_races, interval=\"prediction\", level=.9)\n```\n\nThe race first race has a narrower interval because it involves $x_*$ nearer the center of the training $X$ values.\n\n## Transformations\n\n### Units change on one term\n\nWe begin with the simplest type of transformation on a single predictor: a unit change. Maybe meters of climb isn't the unit of measurement we want to use for climb in our hill racing model. Let's change it so that we can get the amount of time added per km of climb so that the units on climb will match the units on distance. That means instead of what we saw earlier in @eq-orig_climb now:\n\n$$\nY=\\begin{bmatrix}\n    16.083 \\\\\n    48.350 \\\\\n33.650\\\\\n    \\vdots \\\\\n159.833\\\\\n    \\end{bmatrix}\n and \\space \nX=\\begin{bmatrix}\n    1 & 2.5  & 0.650\\\\\n    1 & 6 & 2.5\\\\\n 1 & 6 & 0.9 \\\\\n    \\vdots & \\vdots \\\\\n    1 & 20 & 5.0\\\\\n\\end{bmatrix}\n$$\n\n$$\n\\hatβ=(X^TX)^{-1}X^TY=\\begin{bmatrix}\n    -8.992 \\\\\n    6.218 \\\\\n11.048\\\\\n    \\end{bmatrix}\n$$\n\nOr through R code:\n\n```{r}\nclimb_km<-hills$climb/1000\nmod_hills2<-lm(time~dist+climb_km, data=hills)\nsummary(mod_hills2)$coef\n```\n\nWhich makes perfect sense and behaves just as we saw in the simple linear example from Chapter 5: we divided our $x_2$ by 1000, so to get the same result from $β_2 \\times x_2$ the value of ${β_2}$ would need to increase by a factor of 1000. And now our interpretation includes that the winning time increase by about 11 minutes on average for every km of climb added.\n\nAny time you want to make a units change on a predictor term the $β$ estimate for the associated variable will simply change by the inverse and all other β will be unaffected. Standard errors will change in scale as well which will leave you with parameter test statistics and p-values that are unchanged. The quality of your fit as measured by $R^2$ won't change at all either so use whatever scales you'd like predictor by predictor.\n\n### One or more X terms\n\n```{r}\n#| label: fig-mtcar4\n#| fig-cap: Displacement Transformations and Residuals\n#| fig-subcap: \n#| - Displacement Squared\n#| - Square-root Displacement\n#| - Inverse Displacement\n#| - Log Displacement\n#| echo: false\n#| layout-ncol: 2\n#| layout-nrow: 2\n\npar(mar=c(4,1,1,1))\nattach(mtcars)\nmdisp<-lm(mpg~hp+drat+wt, data=mtcars)\nplot(disp^2, mdisp$resid, xlab=\"Displacement Squared\", ylab=\"Residuals, no disp\", pch=16)\nplot(disp^.5, mdisp$resid, xlab=\"Sqrt Displacement\", ylab=\"Residuals, no disp\", pch=16)\nplot(1/disp, mdisp$resid, xlab=\"Inverse Displacement\", ylab=\"Residuals, no disp\", pch=16)\nplot(log(disp), mdisp$resid, xlab=\"Log Displacement\", ylab=\"Residuals, no disp\", pch=16)\n\n```\n\n```{r}\n#| label: fig-mtcar5\n#| fig-cap: Motor Trend Car Data\n#| fig-subcap: \n#| - Model with Displacement^2 plus HP, Axle Ratio, and Wt\n#| echo: false\n#| fig-width: 5\n\npar(mar=c(4,3,1,1))\nmod_mt2<-lm(mpg~I(disp^2)+hp+drat+wt)\nplot(mod_mt2$fitted, mod_mt2$resid, xlab=\"Fitted MPG\", ylab=\"Model Residuals\")\nabline(h=0, col=2, lwd=3)\n```\n\n```{r}\n#| label: fig-hills3\n#| fig-cap: Scottish Hill Races, Log transformations\n#| fig-subcap: \n#| - Log(dist) vs. residuals of time~climb\n#| - Log(climb) vs. residuals of time~dist\n#| echo: false\n#| fig-align: center\n#| fig-height: 3\n#| fig-width: 4\n#| layout-ncol: 2\n\npar(mar=c(4,4,1,1))\nmdist<-lm(time~dist, data=hills)\nmclimb<-lm(time~climb, data=hills)\nplot(log(hills$dist), mclimb$resid, xlab=\"Log Distance (km)\", ylab=\"time~climb residuals\")\nplot(log(hills$climb), mdist$resid, xlab=\"Log Climb (m)\", ylab=\"time~dist residuals\")\n```\n\n### Transforming Y\n\nWhy would you want to transform Y instead of one or more of your X terms? Well, what if what you really want for the format of your model is $y=e^{\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon}$ ? You aren't able to fit that type of relationship directly with the least-squares regression methods we've covered, but you could use a log transform on y and then fit $log(y)=\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon$ without any trouble. Generally, any time you think the relationship at hand is of the form $y=f(\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon)$ the solution is to transform your $y$ with $f'$ and fit the $f'(y)=\\beta_0+x_1\\beta_1+x_2\\beta_2+\\epsilon$ model.\n\n## Plotting for Multiple Regression\n\nWhile the basics of fitting a model and using it for inference are largely unchanged from our simple linear regression modeling, expanding beyond one independent predictor variable in our model makes plotting the data more complicated (but also more vital). It's more complicated because we can generally only plot two continuous dimensions at a time (in a way our brains can understand) simply because our screens (and paper) are two-dimensional, but more vital because there are now even more nuances to the relationships of the variables that we need to know about.\n\nA good first step is to look at the simple pairwise relationships between each indpendent $x$ predictor and the dependent outcome $y$. This means for the hill data we'd consider the plots shown in @fig-hillplot2.\n\n```{r}\n#| label: fig-hillplot2\n#| fig-cap: Scottish Hill Race Data\n#| fig-subcap: \n#| - Distance and Time\n#| - Climb and Time\n#| echo: false\n#| layout-nrow: 1\n\npar(mar=c(4,4,1,1))\nplot(hills$dist, hills$time, xlab=\"Distance\", ylab=\"Time\", pch=16)\nmdist<-lm(time~dist, data=hills)\nabline(mdist, col=\"dodgerblue\", lwd=3)\ntext(24.5, 30, paste(\"R^2=\", round(summary(mdist)$r.sq, 3)), cex=1.2)\n\nplot(hills$climb, hills$time, xlab=\"Elevation Climb\", ylab=\"Time\", pch=16)\nmclimb<-lm(time~climb, data=hills)\nabline(mclimb, col=\"dodgerblue\", lwd=3)\ntext(6700, 30, paste(\"R^2=\", round(summary(mclimb)$r.sq, 3)), cex=1.2)\n\n```\n\nFrom @fig-hillplot2 it is clearly seen that both the distance of the race and the elevation climb of the race are reasonably linearly related to our outcome of race record time. $R^2$ values for the two simple linear models tell us that distance alone explains 84.6% of the variability in race time and elevation climb explains 64.8% of race time variability. The next step now is to consider how your independent variables relate to each other.\n\n```{r}\n#| label: fig-hillplot3\n#| fig-cap: Scottish Hill Race Distance and Elevation Climb\n#| echo: false\n#| layout-nrow: 1\n#| fig-width: 3.5\n#| fig-height: 2.5\n\npar(mar=c(4,4,1,1))\nplot(hills$dist, hills$climb, xlab=\"Distance\", ylab=\"Elevation Climb\", pch=16)\n\nmdc<-lm(climb~dist, data=hills)\nabline(mdc, col=\"dodgerblue\", lwd=3)\ntext(6, 7000, paste(\"R^2=\", round(summary(mdc)$r.sq, 3)), cex=.8)\n```\n\nThis is the relationship shown in @fig-hillplot3. As one might expect, race distance and elevation change are related to each other. This makes intuitive sense since longer races have greater opportunity for changes in elevation. You aren't going to have a race that increases 3000 meters in elevation but is only 1 km long - that's just too steep to be at all safe (or enjoyable). The $R^2$ of a linear model predicting climb as a function of distance is 42.6%. Why is this important when working to predict time? Well if distance gets us 84.6% of the way to explaining time, and climb gets us 64.8% of the way to explaining time, clearly there must be some overlap in the value they offer since 0.846+0.648\\>1. The 42.6% is a measure of the overlap.\n\n### Added Variable Plot (aka Partial Regression Plot)\n\nThe ***Added Variable Plot***, also sometimes referred to as a ***Partial Regression Plot***, is a tool for capturing how much value an additional independent variable offers in predicting your dependent variable. The plot contains the residuals from two different linear models. First, the x-axis is the residuals from a model predicting $x_2$ using $x_1$. Then, the y-axis is the residuals of a model predicting y using only only $x_1$. To put this another way, the added variable plot shows the relationship between the variability of your possible new predictor term given the existing predictor compared to the variability that remains in your dependent variable after the first predictor is considered.\n\n```{r}\n#| label: fig-hillplot4\n#| fig-cap: Added Variable Plots\n#| fig-subcap: \n#| - Adding Climb to Distance Only\n#| - Adding Distance to Climb Only\n#| echo: false\n#| layout-ncol: 2\n#| fig-height: 3.5\n#| fig-pos: \"H\"\n\npar(mar=c(4,4,1,2))\nmclid<-lm(climb~dist, data=hills)\nplot(mclid$resid, mdist$resid, xlab=\"Climb|Dist Residuals\", ylab=\"Time|Dist Residuals\", pch=16)\n\nmplusclimb<-lm(mdist$resid~mclid$resid)\nabline(mplusclimb, col=\"dodgerblue\", lwd=3)\ntext(-2800, 70, paste(\"y=\", round(mplusclimb$coef[1],3), \"+\", round(mplusclimb$coef[2],4), \"x\"))\n\nmdisc<-lm(dist~climb, data=hills)\nplot(mdisc$resid, mclimb$resid, xlab=\"Dist|Climb Residuals\", ylab=\"Time|Climb Residuals\", pch=16)\n\nmplusdist<-lm(mclimb$resid~mdisc$resid)\nabline(mplusdist, col=\"dodgerblue\", lwd=3)\ntext(-1, 117, paste(\"y=\", round(mplusdist$coef[1],3), \"+\", round(mplusdist$coef[2],4), \"x\"))\n```\n\n@fig-hillplot4 shows two added variable plots. @fig-hillplot4 (a) shows the plot assessing the value climb offers in predicting time after distance, and @fig-hillplot4 (b) assesses the value of adding distance if climb was included first. Equations of the least-squares regression lines are given in the top left corners.\n\nNote that the equations both have an intercept of zero. That's because, as you should recall, 1) fitted regression lines always pass through the mean of X and the mean of Y, and 2) our X and Y in these cases are both residuals and the mean residual from a linear regression model is always zero. The slopes from these fits are worth noting though.\n\nWhen the multiple regression model is fit including distance and climb together, notice the slopes for the distance and climb terms exactly match the slopes from the added variable plots.\n\n```{r}\n#| echo: true\nmhill<-lm(time~dist+climb, data=hills)\nsummary(mhill)$coef\n```\n\nNow let's expand beyond our two-predictor hill race model and look at a larger data set with multiple predictors. @fig-mtcar1 shows a scatterplot matrix for the first 6 columns of the `mtcar` data frame we've worked with earlier.\n\n```{r}\n#| label: fig-mtcar1\n#| echo: false\n#| fig-cap: Motor Trend Car Data\n#| fig-height: 5\n#| layout-valign: \"top\"\n\n\npar(mar=c(4,4,1,1))\nplot(mtcars[,1:6])\n```\n\nAcross the top row you can see that all of the available independent variables are strong potential predictors of fuel efficiency (MPG). Some terms may warrant some transformation given apparent curvature in the mpg-displacement and mpg-hp plots, but all indicate they could be useful in a model for MPG. Other scatterplots in the matrix show us that many of these terms are closely related to each other as well so we know there is overlap in the value they offer to predict MPG.\n\nWe start with the model $mpg=β_0+β_1wt+β_2cyl+ε$ because vehicle weight and the number of engine cylinders should have the strongest influence on fuel efficiency. From there, the question is how much would our model improve if drat, the rear axle ratio, were added? From our initial scatterplot matrix drat's relationship with mpg appears reasonably linear so there shouldn't be any transformations to worry about.\n\n```{r}\n#| label: fig-mtcar2\n#| fig-cap: Added Variable Plot, Rear Axle Ratio\n#| echo: false\n#| fig-height: 2.5\n#| fig-width: 3.5\n\n\npar(mar=c(4,4,1,1))\nmod_mt1<-lm(mpg~cyl+wt, data=mtcars)\nmoddr<-lm(drat~cyl+wt, data=mtcars)\nplot(moddr$resid, mod_mt1$resid, xlab=\"drat | cyl+wt residuals\", ylab=\"MPG | cyl+wt residuals\", pch=16)\n\nmtemp<-lm(mod_mt1$resid~moddr$resid)\nabline(mtemp, col=\"dodgerblue\", lwd=3)\ntext(-.65, 5.5, paste(\"R^2=\", round(summary(mtemp)$r.sq,4)))\n```\n\nThe added variable plot for drat given in @fig-mtcar2 shows that there is no real additional value that drat offers when cylinders and weight are already in the model. The relationship between the residuals from drat modeled by cylinders+weight and the residuals of mpg modeled by cylinders+weight appears completely random; has a best fit line that is virtually horizontal, and a correlation that is zero.\n\nAfter seeing this plot, it should come as no surprise that when a model is fit predicting MPG as a function of cylinders+weight+axle ratio the axle ratio term is not statistically significant.\n\n```{r}\n#| echo: true\nm_cars<-lm(mpg~cyl+wt+drat, data=mtcars)\nsummary(m_cars)$coef\n```\n\n#### In R {.unnumbered}\n\n@fig-hillplot2 and @fig-mtcar2 show added variable plots put together manually using basic plotting functionality in R. There's also the `avPlot` function in the `car` library that will produce added variable plots directly with much less effort. All you need to specify in `avPlot` is the name of the full fitted model object, and the name of the variable you want to consider as the possible add/drop term. The variable name needs to be put in quotation marks. First, an example using the `avPlot` function on the hill race data:\n\n```{r}\n#| echo: false\nlibrary(car, quietly=TRUE)\npar(mar=c(4,4,1,1))\n```\n\n```{r}\n#| label: fig-hillplot5\n#| fig-cap: Added Variable Plots\n#| fig-subcap: \n#| - Climb plot\n#| - Distance plot\n#| echo: true\n#| layout-ncol: 2\n#| fig-height: 4.25\n#| fig-pos: \"H\"\n\nmhills<-lm(time~climb+dist, data=hills)\navPlot(mhills, \"climb\")\navPlot(mhills, \"dist\")\n```\n\nAnd here is the `mtcar` model example with identification of unusual points removed:\n\n```{r}\n#| label: fig-mtcar3\n#| fig-cap: Added Variable Plot for Axle Ratio\n#| echo: true\n#| fig-height: 3.25\n#| fig-width: 4.25\n#| fig-pos: \"H\"\n\nmcars<-lm(mpg~cyl+wt+drat, data=mtcars)\navPlot(mcars, \"drat\", id=FALSE)\n```\n\nIf you want to quickly produce all added variable plots for a model, you can use the `avPlots` command. Just add that `s` to the command name and simply providing the model object will create all plots.\n\n```{r}\n#| echo: true\n#| fig-height: 3.5 \n#| fig-width: 7\navPlots(mhills)\n```\n\n### Partial Residual Plot\n\nThere's another useful plot to know about when working with multiple regression: the ***Partial Residual Plot***. A partial residual plot is another way to look at how each predictor plays a role in a model with multiple independent variables.\n\nTo investigate $x_i$ using a partial residual plot, first fit a model with all independent terms of interest included. The x-axis is then $x_i$, and the y-axis is the residuals from your full model $+β_ix_i$. @fig-hills_partres shows these plots for distance and elevation climb as predictors for race time in the hill race data. The partial residual plots produced by R by default have two helpful overlaid lines: a dashed blue line showing the best linear fit, and a more free-form line showing the pattern followed by the points.\n\n```{r}\n#| label: fig-hills_partres\n#| fig-cap: Partial residual plots, Hill Races\n#| fig-subcap: \n#| - Distance\n#| - Elevation Climb\n#| echo: false\n#| fig-height: 3.25\n#| fig-width: 3.75\n#| layout-ncol: 2\n\nmodh<-lm(time~dist+climb, data=hills)\nlibrary(car, quietly = TRUE)\ncrPlot(modh, \"dist\")\ncrPlot(modh, \"climb\")\n\n```\n\nIn this example, the pink line for distance follows the blue dashed line fairly well as shown in @fig-hills_partres (a). The curvature shown in the pink line for the partial residual plot for climb in @fig-hills_partres (b) however, indicates a transformation on climb might make for an even better model. Specifically, it appears that squaring climb might straighten the relationship out.\n\nTo investigate this, consider the plots in @fig-hills_partres2 showing (a) the partial residual plot when $climb^2$ is used in the model and (b) the partial residual plot when $climb^3$ in the model. The $climb^2$ model is a definite improvement over the original, but still not quite right. The $climb^3$ model straightens the pink curve further to the point that it aligns nearly perfectly with the dashed blue line.\n\n```{r}\n#| label: fig-hills_partres2\n#| fig-cap: Partial residual plots, Climb transformed\n#| fig-subcap: \n#| - Climb Squared\n#| - Climb Cubed\n#| echo: false\n#| fig-height: 3.25\n#| fig-width: 3.75\n#| layout-ncol: 2\n#| fig-pos: \"H\"\n\nclimb2<-hills$climb^2\nclimb3<-hills$climb^3\nmodh2<-lm(hills$time~hills$dist+climb2)\ncrPlot(modh2, \"climb2\")\nmodh3<-lm(hills$time~hills$dist+climb3)\ncrPlot(modh3, \"climb3\")\n\n```\n\nUsing this, we can update our model for winning time to use $climb^3$, and then evaluate the fit and model assumptions. @fig-hills_newmod3 shows the fitted vs. residual plots for both the basic model with $climb$ directly and the approach and the $climb^3$ model.\n\n```{r}\n#| label: fig-hills_newmod3\n#| fig-cap: Fitted vs. Residual Plots\n#| fig-subcap: \n#| - Dist + Climb model\n#| - Dist + Climb$^3$ model\n#| echo: false\n#| fig-height: 3.75\n#| fig-width: 3.9\n#| layout-ncol: 2\n\nmodh1<-lm(hills$time~hills$dist+hills$climb)\nmodh3<-lm(hills$time~hills$dist+climb3)\n\nplot(modh1$fitted, modh1$resid, pch=16, xlab=\"Fitted\", ylab=\"Residuals\")\nabline(h=0, col=2, lwd=3)\n\nplot(modh3$fitted, modh3$resid, pch=16, xlab=\"Fitted\", ylab=\"Residuals\")\nabline(h=0, col=2, lwd=3)\n```\n\nThis shows there is one extreme outlier with a residual greater than 50 that is present in both approaches. We can also see that the basic model does exhibit some curvature that appears fully corrected in the $climb^3$ model. Homoskedasticity appears much improved in the new model as well.\n\nHow do partial residual plots look for our more complex `mtcars` example? Consider @fig-mtcars_partres. The plot for weight shows slight, but non-consistent deviation from the line. The plot for cylinders suggests perhaps a simple transformation might improve the fit. And the plot for drat, the measure of the rear axle ratio, definitely shows curvature away from a horizontal line. This horizontal line confirms what we saw with the added variable plot: inclusion of the term won't significantly help predict MPG at all.\n\n```{r}\n#| label: fig-mtcars_partres\n#| fig-cap: Partial Residual Plots\n#| fig-subcap: \n#| - Cylinders\n#| - Weight\n#| - Rear Axle Ratio\n#| echo: false\n#| fig-height: 3.5\n#| fig-width: 3.75\n#| layout-ncol: 3\n#| fig-pos: \"H\"\n\nmcar<-lm(mpg~cyl+wt+drat)\ncrPlot(mcar, \"cyl\")\ncrPlot(mcar, \"wt\")\ncrPlot(mcar, \"drat\")\n```\n\nIf cylinders is transformed to be included in the model as $1/cylinders$ then the updated partial residual plot becomes what is shown in @fig-invcyl (a) and the resulting fitted vs. residual plot for the weight+inverse cylinders model is as shown in @fig-invcyl (b). The $R^2$ of the model fit with cylinders inverted is very slightly increased over the initial model with simply weight+cylinders, 0.837 vs 0.830, making it a matter of scientist discretion if the added complexity of inverting cylinders is worth the minimal fit improvement.\n\n```{r}\n#| label: fig-invcyl\n#| echo: false\n#| fig-cap: Weight + 1/cylinders\n#| fig-height: 3.55\n#| fig-pos: H\n#| fig-subcap: Inverse Cylinders Partial Residual Plot,Fitted vs. Residual\n#| fig-width: 3.75\n#| layout-ncol: 2\n\ncyl2<-1/mtcars$cyl\nmcar2<-lm(mpg~cyl2+wt, data=mtcars)\ncrPlot(mcar2, \"cyl2\")\n\nplot(mcar2$fitted.values, mcar2$residuals, pch=16, xlab=\"Fitted\", ylab=\"Residuals\")\nabline(h=0, col=2, lwd=3)\n```\n\n```{r}\nmod_car<-lm(mpg~wt+cyl, data=mtcars)\nmod_car2<-lm(mpg~wt+I(1/cyl), data=mtcars)\n\nc(summary(mod_car)$r.square, summary(mod_car2)$r.square)\n```\n\n#### In R {.unnumbered}\n\nLike the `avPlot` function, the partial residual plot function is in the `car` library. `crPlot` creates the partial residual plots with a minimum of two inputs: the full fitted model object, and the name of the variable you want to focus on. Make sure you put the variable name in quotation marks.\n\nThe code to produce @fig-hills_partres was simply:\n\n```{r}\n#| eval: false\n#| include: true\n\nmodh<-lm(time~dist+climb, data=hills)\ncrPlot(modh, \"dist\")\ncrPlot(modh, \"climb\")\n```\n\nAs seen with `avPlot`, there is also a plural version of the `crPlot` command. `crPlots` will create all possible partial residual plots for a specified model. Where does the name \"crPlot\" come from? The y-axis is the component of interest plus the model residual: \"cr\" is short for \"component + residual\".\n\n### Inverse Response Plot\n\nWhen in a situation where transforming Y is your best course of action, an ***Inverse Response Plot*** can help. For this we'll create two dummy examples so the real relationship is fully known. Let's create 50 rows of three independent columns, \"A\", \"B\", and \"C\", where each is a created from a random sample from a Uniform\\[0,5\\]. Then we'll make Y1 and Y2 where $Y_1=(A+2B+3C)^2+\\epsilon$ and $Y_2=e^{A+B+C}+\\epsilon$ using a Normal(0, 1) for the $\\epsilon$ noise component.\n\n```{r}\nset.seed(123)\nA<-runif(50, 0, 5)\nB<-runif(50, 0, 5)\nC<-runif(50, 0, 5)\n\nY1<-(A+2*B+3*C)^2 + rnorm(50)\nY2<-exp(A+B+C) + rnorm(50)\n```\n\nIf we start by looking at simple plots of A, B, and C plotted against Y1, and against Y2, it is not immediately clear that transforming our Ys is what needs to happen (see @fig-fake1).\n\n```{r}\n#| echo: false\n#| label: fig-fake1\n#| fig-cap: Simple Scatter Plots\n#| fig-subcap: \n#| - A vs. Y1\n#| - B vs. Y1\n#| - C vs. Y1\n#| - A vs. Y2\n#| - B vs. Y2\n#| - C vs. Y2\n#| layout-ncol: 3\n#| layout-nrow: 2\n#| fig-pos: \"H\"\nplot(A, Y1, pch=16)\nplot(B, Y1, pch=16)\nplot(C, Y1, pch=16)\nplot(A, Y2, pch=16)\nplot(B, Y2, pch=16)\nplot(C, Y2, pch=16)\n\n```\n\nIf we fit the basic models for Y1 and Y2 as functions of A, B, and C we get fitted vs. residual plots as shown in @fig-fake2 which clearly indicate there is a strong non-linear relationship at play and a transformation somewhere is warranted.\n\n```{r}\n#| echo: false\n#| label: fig-fake2\n#| fig-cap: Fitted vs. Residuals\n#| fig-subcap: \n#| - Y1~A+B+C Fitted vs. Residual\n#| - Y2~A+B+C Fitted vs. Residual\n#| layout-ncol: 2\n\nmod1<-lm(Y1~A+B+C)\nplot(mod1$fitted, mod1$residuals)\n\nmod2<-lm(Y2~A+B+C)\nplot(mod2$fitted, mod2$residuals)\n```\n\nSo let's look at the partial residual plots for A, B, and C to find out where to transform. These are shown in @fig-fake3 and none look to have significant curvature in their pink line fits.\n\n```{r}\n#| echo: false\n#| label: fig-fake3\n#| fig-cap: Partial Residual Plots\n#| fig-subcap: \n#| - A in model of Y1\n#| - B in model of Y1\n#| - C in model of Y1\n#| - A in model of Y2\n#| - B in model of Y2\n#| - C in model of Y2\n#| layout-ncol: 3\n#| layout-nrow: 2\n#| fig-height: 4\n#| fig-pos: \"H\"\n\ncrPlot(mod1, \"A\")\ncrPlot(mod1, \"B\")\ncrPlot(mod1, \"C\")\ncrPlot(mod2, \"A\")\ncrPlot(mod2, \"B\")\ncrPlot(mod2, \"C\")\n```\n\nIf none of the X predictor terms are the source, consider the response Y as needing the transformation by looking at a plot of the fitted value of Y on the x-axis, vs the observed Y values on the y-axis. This is called the ***Inverse Response Plot*** and if Y needs a transformation, the shape of the curve in the inverse response plot will tell you which one you need.\n\n```{r}\n#| echo: false\n#| label: fig-fake4\n#| fig-cap: Inverse Response Plots\n#| fig-subcap: \n#| - Inverse Response Y1\n#| - Inverse Response Y2\n#| layout-ncol: 2\n#| fig-height: 4\n#| fig-pos: \"H\"\n\nplot(mod1$fitted.values, Y1, xlab=\"Mod 1 Fitted Values\")\nplot(mod2$fitted.values, Y2, xlab=\"Mod 2 Fitted Values\")\n\n```\n\nSure enough, the inverse response plot for Y1 is a curve that follows an $x^2$ curve shape which aligns with us needing to apply a square-root to Y1 to make it linear, and the inverse response plot for Y2 is a curve that follows an exponential curve shape indicating to us that a log transformation for Y2 is the way to go. Both just as our data was created.\n\n## Multicollinearity {#sec-multico}\n\nWhen two or more independent variables are highly correlated with each other, your multiple regression model suffers from a problem known as multicollinearity. At issue is the fact that this correlation undermines the assumption that independent random variables are in fact *independent*, which is critical for accurately estimating their individual impacts on the dependent variable you're predicting.\n\nSometimes multicollinearity arises because of a choice the modeler has made that is easily corrected. For example, in a health study rather than including both the weight of a patient and the patient body mass index, you can just select one as a measure of patient size and move on. Often though the choice isn't quite so simple as the variables might very naturally move together while at the same time each providing valuable insight.\n\nThe problem is that having highly correlated independent variables makes the standard errors of the estimated regression coefficients increase. This means your confidence intervals are wider and you're less able to identify when a term is significantly different from zero or any other key value of interest. Multicollinearity can also lead to coefficients changing notably, even changing signs unexpectedly, with relatively minor changes to the data or the model.\n\nFor an example, let's look at the `fgl` data frame from the `MASS` library. This data frame considers the refractive index of 214 fragments of six different types of glass and their oxide makeup. We'll start with the full model that includes all available predictors of refractive index:\n\n```{r}\n#| echo: true\nmod_glass<-lm(RI~., data=fgl)\nsummary(mod_glass)\n```\n\nThis model summary tells us a few things. First, you'll notice that many of our independent variables do not appear significant - many p-values are well above any reasonable $\\alpha$ level. You can also see that two glass types that are most different from each other are vehicle window glass, with a -0.88579 slope and vehicle headlight glass with a 1.58 slope. This kind of makes sense that they would differ from the other types because the thick safety glass of vehicle windows is very different from the type of glass used to make regular home windows or tableware. Similarly, glass for headlights is also very different from your drinking glass but in an entirely different way. These observations aside though, the $R^2=0.9081$ does indicate the model does a fairly good job at predicting the refractive index of glass given the glass components.\n\nNow consider a reduced model that reduces glass type down to only three levels: vehicle, headlight, or other, and only considers the Al, Si, Ca, and Ba elements.\n\n```{r}\n#| echo: true\n\nvehicle<-as.factor(fgl$type==\"Veh\")\nheadlight<-as.factor(fgl$type==\"Head\")\nmod_glass2<-lm(RI~Al+Si+Ca+Ba+vehicle+headlight, data=fgl)\nsummary(mod_glass2)\n```\n\nOur intercept is wildly different now. What do you notice about the coefficients for Al, Si, Ca and Ba for the second model compared to the first? The Al and Si slopes are more than twice what they were in the earlier model while the Ca and Ba ones decreased significantly. And look at the standard errors on those new coefficient estimates. Our large model had standard errors that were all in the .66 to .74 range, but now they are much much smaller. Si went from having a standard error of 0.6846 to one of only .09887. The model coefficient of determination, $R^2$, is only slightly decreased and still strong at 0.8941. What is going on here? Multicollinearity. Here is the correlation matrix (rounded to three decimal places) on our continuous independent variables:\n\n```{r}\nround(cor(fgl[,2:9]),3)\n```\n\nLooks like Mg is fairly strongly correlated with a few of the other terms. That's why the model wasn't hurt much by it's removal.\n\nIn addition to checking correlation matrices, the *variance inflation factor* is a good metric for flagging where multicollinearity is likely an issue. The variance inflation factor is defined as:\n\n$$\nVIF_i=\\frac{1}{1-R_i^2}\n$$\n\nWhere $R_i^2$ is the $R^2$ from a regression model predicting variable $i$ using all other predictors. So to examine the influence of Mg in our model we would look at how well Mg could be modeled linearly as a function of NA, Al, Si, K, Ca, Ba, Fe, and our two glass types:\n\n```{r}\nmod_Mg<-lm(Mg~Na+Al+Si+K+Ca+Ba+Fe+vehicle+headlight, data=fgl)\nsummary(mod_Mg)$r.square\n```\n\nSeems Mg can be almost entirely explained by the other terms. With a high $R_{Mg}^2$, that means $VIF_{Mg}$ will be large. In fact, $\\frac{1}{1-.9952}=208.42$. Values of $VIF>5$ are generally considered to be worth a closer look.\n\n#### In R {.unnumbered}\n\nFortunately, R will pretty easily provide you with all VIF metrics when provided with a full model under consideration. In the `car` library lives the `vif` function. Running all VIFs for our glass model is as simple as:\n\n```{r}\nmod_glass<-lm(RI~Na+Mg+Al+Si+K+Ca+Ba+Fe+vehicle+headlight, data=fgl)\nvif(mod_glass)\n```\n\nTaking away Mg as the term with the largest VIF, our new model with VIFs looks like:\n\n```{r}\nmod_glass2<-lm(RI~Na+Al+Si+K+Ca+Ba+Fe+vehicle+headlight, data=fgl)\nvif(mod_glass2)\n```\n\nShowing with that one omission, the bulk of our multicollinearity issue has been cleared up.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Chapter7.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","bibliography":["references.bib"],"editor":"visual","theme":["Lumen"],"title":"Go Bigger","label":"sec-chap7"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"Chapter7.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt","title":"Go Bigger","label":"sec-chap7"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}